// Course: IoT and Edge Computing: Oct 2024
// This is a follow up Lab after based on the theory covered in the Session 7A about classification
// Models and the steps to make them run on ESP32

// This code is explained in the Lab8a based on the theory covered in Ses 7A
// Students are expected to identify similar datasets and port them to ESP32 based on 
// what is learnt here. Sample Examples are: IRIS dataset, Cactus, etc. as part of CP3 Project
// evaluation component.
// For other datasets that can be classified and ported on to ESP32
// Ref:https://archive.ics.uci.edu/datasets 

#include <EloquentTinyML.h>
// This file has the TFlite model generated by the Cars_Classify_Tflite_hex.ipynb 
// Done on Sep 2024
#include "ultasonic_flow_model_esp32.h"


#define NUMBER_OF_INPUTS 27
#define NUMBER_OF_OUTPUTS 4 
// in future projects you may need to tweek this value: it's a trial and error process
//#define TENSOR_ARENA_SIZE 3*1024  // Since the size is 2960 here, this needs to be 
// changed from 2*1024 to 3*1024

#define TENSOR_ARENA_SIZE 5*1024  // Since the size is 3836 for more improved Sine model

Eloquent::TinyML::TfLite<NUMBER_OF_INPUTS, NUMBER_OF_OUTPUTS, TENSOR_ARENA_SIZE> ml;

void setup() {
    Serial.begin(115200);
   
    ml.begin(ultasonic_flow_model_esp32);
}

float fResult[NUMBER_OF_OUTPUTS] = {0};
float fRes = NULL;

int find_class(float *arr){
  int max = 0, pred_class = 0;

  if (arr[0] > max)
    pred_class = 1;
  if (arr[1] > max)
    pred_class = 2;
  if (arr[2] > max)
    pred_class = 3;
  if (arr[3] > max)
    pred_class = 4;
  
  return pred_class;
}

void loop() {

    // Line no. 19: Input1
    float input1[] = {0.42486196756362915f,
                      0.792097806930542f,
                      0.5861948728561401f,
                      0.5610111951828003f,
                      0.5354955196380615f,
                      0.43262410163879395f,
                      0.5789740085601807f,
                      0.39168402552604675f,
                      0.6487962603569031f,
                      0.4895608425140381f,
                      0.013251636177301407f,
                      0.8533219695091248f,
                      0.7751578092575073f,
                      0.8866511583328247f,
                      0.7434033155441284f,
                      0.7136684060096741f,
                      0.603962779045105f,
                      0.904298722743988f,
                      0.8162965178489685f,
                      0.01068122498691082f,
                      0.01068122498691082f,
                      0.006772009190171957f,
                      0.006772009190171957f,
                      0.002277904422953725f,
                      0.002277904422953725f,
                      0.006507592275738716f,
                      0.006507592275738716f
    };
    // Expected output1: 1.0 0.0 0.0 0.0

    // Line no. 109: Input2
    float input2[] = {0.4233745038509369f,
                      0.791832447052002f,
                      0.5857370495796204f,
                      0.9354183077812195f,
                      0.931196928024292f,
                      0.9218912720680237f,
                      0.9492834210395813f,
                      0.39765626192092896f,
                      0.6546631455421448f,
                      0.5017998814582825f,
                      0.01559414528310299f,
                      0.7993514537811279f,
                      0.6766496896743774f,
                      0.7790806889533997f,
                      0.6904633641242981f,
                      0.7447614669799805f,
                      0.6252105236053467f,
                      0.8376504778862f,
                      0.7461320757865906f,
                      0.008544979616999626f,
                      0.008544979616999626f,
                      0.0022573363967239857f,
                      0.0022573363967239857f,
                      0.01138952188193798f,
                      0.01138952188193798f,
                      0.006507592275738716f,
                      0.006507592275738716f
    };
    // Expected output2: 0.0 0.0 1.0 0.0

    float input3[] ={0.3357534408569336f,
                     0.7899659276008606f,
                     0.8327049016952515f,
                     0.2211623638868332f,
                     0.1961904764175415f,
                     0.0061465720646083355f,
                     0.2615587115287781f,
                     0.45617425441741943f,
                     0.6596449613571167f,
                     0.0015941582387313247f,
                     0.2491578608751297f,
                     0.07829048484563828f,
                     0.12608686089515686f,
                     0.07476462423801422f,
                     0.007205682341009378f,
                     0.034533120691776276f,
                     0.05152188614010811f,
                     0.12317916005849838f,
                     0.14989814162254333f,
                     0.9890814423561096f,
                     0.9890814423561096f,
                     1.0f,
                     1.0f,
                     1.0f,
                     1.0f,
                     0.989154040813446f,
                     0.989154040813446f
      };
    // Expected output2: 0.0 0.0 0.0 1.0

    

    initfResult(fResult);
    fRes = ml.predict(input1, fResult);
    Serial.print("\nThe output value returned for input1 is:\n");
    // Serial.println(fRes);
    displayOutput(fResult);  
    Serial.print("\nPredicted Class: ");
    Serial.println(find_class(fResult));

    initfResult(fResult);
    fRes = ml.predict(input2, fResult);
    Serial.print("\nThe output value returned for input2 is:\n");
    // Serial.println(fRes);
    displayOutput(fResult);
    Serial.print("\nPredicted Class: ");
    Serial.println(find_class(fResult));

    initfResult(fResult);
    fRes = ml.predict(input3, fResult);
    Serial.print("\nThe output value returned for input3 is:\n");
    // Serial.println(fRes);
    displayOutput(fResult);     
    Serial.print("\nPredicted Class: ");
    Serial.println(find_class(fResult));

    delay(5000); // 5 milliseconds of delay between two plots
}

void initfResult(float *fResult){
  
    for(int i = 0; i < NUMBER_OF_OUTPUTS; i++){
       fResult[i] = 0.0f;
    }
} // end of displayOutput()

void displayOutput(float *fResult){
  
    for(int i = 0; i < NUMBER_OF_OUTPUTS; i++){
        Serial.print(fResult[i]);
        Serial.print(" ");
    }
} // end of displayOutput()
